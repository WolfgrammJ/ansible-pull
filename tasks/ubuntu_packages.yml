###############################################################
# Remmina preparation (Ubuntu)
# !!!Repository currently not maintained!!!
###############################################################
#- name: Add remmina repository from PPA and install its signing key on Ubuntu target
#  ansible.builtin.apt_repository:
#    repo: ppa:remmina-ppa-team/remmina-next


###############################################################
# Package Installation from Repos
###############################################################
- name: Install packages
  ansible.builtin.package:
    name:
      - htop
      - mc
      - neofetch
      - tmux
      - zsh
      - remmina
      - remmina-plugin-exec
      - remmina-plugin-www
#      - remmina-plugin-nx
      - remmina-plugin-kwallet
      - default-jre
      - freerdp2-x11
      - smbclient
      - dolphin-nextcloud
      - dolphin-plugins
      - terminator
      - cifs-utils
      - nfs-common
      - kwrite
      - autofs
      - curl
      - piper #for mouse configuration
      - gimp
      - virtualbox
      - filezilla
      - openvpn
      - yubioath-desktop
    state: latest


###############################################################
# Syncthing preparation (Ubuntu)
# Needs to run after curl is installed
###############################################################
- name: Add PGP key and repository for syncthing (Ubuntu)
  become: yes
  raw: |
    curl -o /usr/share/keyrings/syncthing-archive-keyring.gpg https://syncthing.net/release-key.gpg
    echo "deb [signed-by=/usr/share/keyrings/syncthing-archive-keyring.gpg] https://apt.syncthing.net/ syncthing stable" | sudo tee /etc/apt/sources.list.d/syncthing.list

- name: Update repositories cache (Ubuntu)
  apt:
    update_cache: yes
    allow_unauthenticated: yes


###############################################################
# Syncthing Installation (Ubuntu)
# Needs to run after curl is installed
###############################################################
- name: Install Syncthing
  ansible.builtin.package:
    name:
      - syncthing
    state: latest

##################################################
# Syncthing: Set up system service
# Currently deactivated because syncthing will be set up manually per user ("systemctl --user enable syncthing.service")
##################################################
#- name: Enabling syncthing service
#  become: yes
#  ansible.builtin.systemd:
#    daemon_reload: yes
#    state: restarted
#    enabled: yes
#    name: syncthing@ansible.service
#  ignore_errors: yes

#- name: Start syncthing service explicitly
#  become: yes
#  ansible.builtin.systemd:
#    state: started
#    name: syncthing@ansible.service
#  ignore_errors: yes


##################################################
# Configuring "Terminator"
##################################################
- name: Create Terminator config file directory if it does not exist
  become_user: "{{ username.stdout }}"
  ansible.builtin.file:
    path: ~/.config/terminator
    state: directory
    #mode: '0755'

- name: Configure Terminator
  become_user: "{{ username.stdout }}"
  ansible.builtin.copy:
    src: files/terminator.config
    dest: ~/.config/terminator/config
    owner: "{{ username.stdout }}"
#    group: "{{ username }}"
    backup: yes

##################################################
# Configuring "TMUX"
##################################################
- name: Configure tmux local
  ansible.builtin.copy:
    src: files/.tmux.conf
    dest: /home/{{ username.stdout }}/.tmux.conf
    owner: "{{ username.stdout }}"
#    group: "{{ username }}"
    backup: yes

- name: Configure tmux remote
  ansible.builtin.copy:
    src: files/.tmux.remote.conf
    dest: /home/{{ username.stdout }}/.tmux.remote.conf
    owner: "{{ username.stdout }}"
#    group: "{{ username }}"
    backup: yes

- name: Clone tmux plugin-manager git-repository
  become_user: "{{ username.stdout }}"
  ansible.builtin.git:
    repo: https://github.com/tmux-plugins/tpm
    dest: ~/.tmux/plugins/tpm

- name: Install tmux-plugins
  become_user: "{{ username.stdout }}"
  raw: |
    tmux new -d -s __noop >/dev/null 2>&1 || true 
    tmux set-environment -g TMUX_PLUGIN_MANAGER_PATH "~/.tmux/plugins"
    "$HOME"/.tmux/plugins/tpm/bin/install_plugins || true
    tmux kill-session -t __noop >/dev/null 2>&1 || true


##################################################
# Copy Backup-Script for Home Directory
##################################################
#- name: Copy backup-home-dir.sh
#  ansible.builtin.copy:
#    src: files/backup-home-dir.sh
#    dest: /home/{{ username.stdout }}/backup-home-dir.sh
#    owner: "{{ username }}"
##    group: "{{ username }}"
#    backup: yes


###############################################################
# Install additional software
###############################################################
### VMware Workstation Pro: check if installed and register var
- name: Check if VMware Workstation Pro is installed
  stat:
    path: /usr/share/applications/vmware-workstation.desktop
  register: vmwareworkstationpro

### VMware Workstation Pro: Installation
- name: Download VMware Workstation Pro
  become: yes
  get_url:
    url: https://www.vmware.com/go/getworkstation-linux
    dest: /usr/VMWare-Workstation-Full.x86_64.bundle
#  when: not vmwareworkstationpro.stat.exists

- name: Install VMware Workstation Pro
  become: yes
#  shell: |
#    sh ./VMWare-Workstation-Full.x86_64.bundle --console --deferred-gtk
#    /usr/bin/vmware-modconfig --console --install-all
  shell: |
    sh ./VMWare-Workstation-Full.x86_64.bundle --console --deferred-gtk
  args:
    chdir: /usr
#    creates: /usr/share/applications/vmware-workstation.desktop
#  when: not vmwareworkstationpro.stat.exists

- name: Delete VMware Workstation Pro installation files
  become: yes
  ansible.builtin.file:
    path: /usr/VMWare-Workstation-Full.x86_64.bundle
    state: absent

### TeamViewer (Ubuntu)
- name: Install TeamViewer (Ubuntu)
  become: yes
  apt:
    deb: https://download.teamviewer.com/download/linux/teamviewer_amd64.deb

### Vivaldi Browser
- name: Install Vivaldi Browser
  become: yes
  apt:
    deb: https://downloads.vivaldi.com/stable/vivaldi-stable_6.4.3160.34-1_amd64.deb

### Netextender: check if installed and register var
- name: Check if NetExtender is installed
  stat:
    path: /usr/bin/netExtenderGui
  register: netextender

### NetExtender: Installation and permissions
- name: Download NetExtender version 10.2.845
  become_user: "{{ username.stdout }}"
  get_url:
    url: https://software.sonicwall.com/NetExtender/NetExtender.Linux-10.2.845.x86_64.tgz
    dest: /home/{{ username.stdout }}/NetExtender.Linux.tgz
  when: not netextender.stat.exists

- name: Extract NetExtender archive
  become_user: "{{ username.stdout }}"
  ansible.builtin.unarchive:
    src: /home/{{ username.stdout }}/NetExtender.Linux.tgz
    dest: /home/{{ username.stdout }}/
  when: not netextender.stat.exists

- name: Install NetExtender
  become: yes
  shell: ./install
  args:
    chdir: /home/{{ username.stdout }}/netExtenderClient/
    creates: /usr/bin/netExtenderGui
  when: not netextender.stat.exists

- name: Delete Netextender installation files
  become: yes
  ansible.builtin.file:
    path: /home/{{ username.stdout }}/NetExtender.Linux.tgz
    state: absent

- name: Set NetExtender Permissions 1
  ansible.builtin.file:
    path: /usr/sbin/pppd
    state: file
    mode: '4755'

- name: Set NetExtender Permissions 2
  ansible.builtin.file:
    path: /etc/ppp/peers
    state: directory
    mode: '2755'

- name: Set NetExtender Permissions 3 (Ubuntu)
  ansible.builtin.file:
    path: /etc/ppp/peers/provider
    state: file
    mode: '0644'

- name: Set NetExtender Permissions4
  ansible.builtin.file:
    path: /etc/ppp/peers
    state: directory
    mode: '2755'

- name: Remove NetExtender directory
  ansible.builtin.file:
    path: /home/{{ username.stdout }}/netExtenderClient/
    state: absent
