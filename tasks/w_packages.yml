- name: gather os specific variables
  include_vars: "{{ item }}"
  with_first_found:
    - "vars/{{ ansible_distribution|lower }}-{{ ansible_distribution_major_version|lower}}.yml"
    - "vars/{{ ansible_distribution|lower }}.yml"
    - "vars/{{ ansible_os_family|lower }}.yml"

- name: Add remmina repository from PPA and install its signing key on Ubuntu target
  ansible.builtin.apt_repository:
    repo: ppa:remmina-ppa-team/remmina-next
  when: ansible_facts['os_family'] == 'Debian'

- name: Add PGP key and repository for syncthing
  become: yes
  raw: |
    curl -s https://syncthing.net/release-key.txt | sudo apt-key add -
    echo "deb https://apt.syncthing.net/ syncthing stable" | sudo tee /etc/apt/sources.list.d/syncthing.list
  when: ansible_facts['os_family'] == 'Debian'

- name: Update repositories cache (Debian)
  apt:
    update_cache: yes
  when: ansible_facts['os_family'] == 'Debian'

- name: Install workstation packages (all Ditros)
  ansible.builtin.package:
    name:
      - remmina
      - syncthing
      - "{{ java }}"
      - "{{ freerdp }}"
      - terminator 
      - cifs-utils
      - "{{ smbclient }}"
      - dolphin
      - dolphin-plugins
      - kwrite
    state: latest

- name: Install workstation packages (Debian)
  ansible.builtin.package:
    name:
      - remmina-plugin-exec
      - remmina-plugin-www
      - remmina-plugin-nx
      - remmina-plugin-kwallet
      - autofs
    state: latest
  when: ansible_facts['os_family'] == 'Debian'

- name: Install workstation packages (Arch)
  ansible.builtin.package:
    name:
      - timeshift-autosnap
      - grub-btrfs
    state: latest
  when: ansible_facts['os_family'] == 'Archlinux'

- name: Install TeamViewer (Debian)
  become: yes
  apt:
    deb: https://download.teamviewer.com/download/linux/teamviewer_amd64.deb
  when: ansible_facts['os_family'] == 'Debian'

- name: Install TeamViewer (RedHat)
  become: yes
  dnf:
    name: https://download.teamviewer.com/download/linux/teamviewer.x86_64.rpm
    disable_gpg_check: true
    state: present
  when: ansible_facts['os_family'] == 'RedHat'

- name: Remove "failovermethod" from TeamViewer Repository file (RedHat)
  become: yes
  ansible.builtin.lineinfile:
    path: /etc/yum.repos.d/teamviewer.repo
    state: absent
    regex: '^failovermethod='
  when: ansible_facts['os_family'] == 'RedHat'

- name: Check if TeamViewer is installed (ARCH)
  stat:
    path: /usr/bin/teamviewer
  register: teamviewer_arch
  when: ansible_facts['os_family'] == 'Archlinux'

- name: Download TeamViewer (Arch)
  become_user: "{{ username }}"
  get_url:
    url: https://download.teamviewer.com/download/linux/teamviewer_amd64.tar.xz
    dest: ~/teamviewer_amd64.tar.xz
  #when: not teamviewer_arch.stat.exists
  when: ansible_facts['os_family'] == 'Archlinux'

- name: Extract TeamViewer archive (Arch)
  become_user: "{{ username }}"
  ansible.builtin.unarchive:
    src: ~/teamviewer_amd64.tar.xz
    dest: ~/
    remote_src: yes
  #when: not teamviewer.stat.exists
  when: ansible_facts['os_family'] == 'Archlinux'

- name: Install TeamViewer (Arch)
  become: yes
  shell: ./tv-setup install force
  args:
    chdir: /home/{{ username }}/teamviewer/
    creates: /usr/bin/teamviewer
  #when: not teamviewer_arch.stat.exists
  when: ansible_facts['os_family'] == 'Archlinux'

- name: Delete TeamViewer installation files 1/2 (Arch)
  become: yes
  ansible.builtin.file:
    path: /home/{{ username }}/teamviewer_amd64.tar.xz
    state: absent
  when: ansible_facts['os_family'] == 'Archlinux'

- name: Delete TeamViewer installation files 2/2 (Arch)
  become_user: "{{ username }}"
  ansible.builtin.file:
    path: /home/{{ username }}/teamviewer
    state: absent
  when: ansible_facts['os_family'] == 'Archlinux'

- name: Check if NetExtender is installed
  stat:
    path: /usr/bin/netExtenderGui
  register: netextender

- name: Download NetExtender version 10.2.824
  become_user: "{{ username }}"
  get_url:
    url: https://software.sonicwall.com/NetExtender/NetExtender.Linux-10.2.824.x86_64.tgz
    dest: /home/{{ username }}/NetExtender.Linux.tgz
  when: not netextender.stat.exists

- name: Extract NetExtender archive
  become_user: "{{ username }}"
  ansible.builtin.unarchive:
    src: /home/{{ username }}/NetExtender.Linux.tgz
    dest: /home/{{ username }}/
  when: not netextender.stat.exists

- name: Install NetExtender
  become: yes
  shell: ./install
  args:
    chdir: /home/{{ username }}/netExtenderClient/
    creates: /usr/bin/netExtenderGui
  when: not netextender.stat.exists

- name: Set NetExtender Permissions 1
  ansible.builtin.file:
    path: /usr/sbin/pppd
    state: file
    mode: '4755'

- name: Set NetExtender Permissions 2
  ansible.builtin.file:
    path: /etc/ppp/peers
    state: directory
    mode: '2755'

- name: Set NetExtender Permissions 3 (Debian)
  ansible.builtin.file:
    path: /etc/ppp/peers/provider
    state: file
    mode: '0644'
  when: ansible_facts['os_family'] == 'Debian'

- name: Set NetExtender Permissions4
  ansible.builtin.file:
    path: /etc/ppp/peers
    state: directory
    mode: '2755'

- name: Remove NetExtender directory
  ansible.builtin.file:
    path: /home/{{ username }}/netExtenderClient/
    state: absent

- name: Download and move syncthing service
  become_user: "{{ username }}"
  raw: |
    wget -P ~/ https://raw.githubusercontent.com/syncthing/syncthing/main/etc/linux-systemd/system/syncthing%40.service
    sudo chown root: syncthing@.service
    sudo mv ~/syncthing@.service /etc/systemd/system

- name: Setting up syncthing service
  become: yes
  ansible.builtin.systemd:
    daemon_reload: yes
    state: restarted
    enabled: yes
    name: syncthing@"{{ username }}"

- name: Start syncthing service explicitly
  become: yes
  ansible.builtin.systemd:
    state: started
    name: syncthing@"{{ username }}"
